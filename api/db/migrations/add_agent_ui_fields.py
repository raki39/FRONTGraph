"""
Migra√ß√£o para adicionar campos de UI/UX aos agentes
Adiciona: description, icon, color, features
"""

from sqlalchemy import text
import logging

logger = logging.getLogger(__name__)

def upgrade(engine):
    """Adiciona novos campos de UI/UX √† tabela agents"""
    try:
        logger.info("üîÑ Iniciando migra√ß√£o: Adicionando campos de UI/UX aos agentes")
        
        with engine.connect() as conn:
            # Verifica se as colunas j√° existem
            result = conn.execute(text("PRAGMA table_info(agents)"))
            existing_columns = [row[1] for row in result.fetchall()]
            
            # Adiciona description se n√£o existir
            if 'description' not in existing_columns:
                logger.info("‚ûï Adicionando coluna 'description'")
                conn.execute(text("ALTER TABLE agents ADD COLUMN description TEXT"))
            else:
                logger.info("‚úÖ Coluna 'description' j√° existe")
            
            # Adiciona icon se n√£o existir
            if 'icon' not in existing_columns:
                logger.info("‚ûï Adicionando coluna 'icon'")
                conn.execute(text("ALTER TABLE agents ADD COLUMN icon VARCHAR(100) DEFAULT 'MessageSquare'"))
            else:
                logger.info("‚úÖ Coluna 'icon' j√° existe")
            
            # Adiciona color se n√£o existir
            if 'color' not in existing_columns:
                logger.info("‚ûï Adicionando coluna 'color'")
                conn.execute(text("ALTER TABLE agents ADD COLUMN color VARCHAR(100) DEFAULT 'from-blue-500 to-cyan-500'"))
            else:
                logger.info("‚úÖ Coluna 'color' j√° existe")
            
            # Adiciona features se n√£o existir
            if 'features' not in existing_columns:
                logger.info("‚ûï Adicionando coluna 'features'")
                conn.execute(text("ALTER TABLE agents ADD COLUMN features TEXT"))
            else:
                logger.info("‚úÖ Coluna 'features' j√° existe")
            
            # Commit das altera√ß√µes
            conn.commit()
            
        logger.info("‚úÖ Migra√ß√£o conclu√≠da: Campos de UI/UX adicionados aos agentes")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na migra√ß√£o: {e}")
        raise

def downgrade(engine):
    """Remove os campos de UI/UX da tabela agents"""
    try:
        logger.info("üîÑ Iniciando rollback: Removendo campos de UI/UX dos agentes")
        
        with engine.connect() as conn:
            # SQLite n√£o suporta DROP COLUMN diretamente
            # Precisar√≠amos recriar a tabela, mas por seguran√ßa vamos apenas avisar
            logger.warning("‚ö†Ô∏è SQLite n√£o suporta DROP COLUMN. Campos mantidos por seguran√ßa.")
            logger.info("üí° Para remover completamente, seria necess√°rio recriar a tabela")
            
        logger.info("‚úÖ Rollback conclu√≠do (campos mantidos por seguran√ßa)")
        
    except Exception as e:
        logger.error(f"‚ùå Erro no rollback: {e}")
        raise

if __name__ == "__main__":
    # Para teste direto
    from api.db.session import engine
    upgrade(engine)
