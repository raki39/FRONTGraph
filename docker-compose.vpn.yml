# Docker Compose para VPN - IP: 192.168.10.35
# Uso: docker compose -f docker-compose.vpn.yml up -d

version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chainagent_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - shared-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-admin}@postgres:5432/${POSTGRES_DB:-chainagent_db}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # CORS - IMPORTANTE: Incluir IP da VPN
      ALLOWED_ORIGINS: http://192.168.10.35:3000,http://localhost:3000,http://localhost:5173
      
      # Keys e observabilidade
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-false}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY:-}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT:-chainagent}
      
      # JWT
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
      - shared-data:/shared-data

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-admin}@postgres:5432/${POSTGRES_DB:-chainagent_db}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-false}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY:-}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT:-chainagent}
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./agentgraph:/app/agentgraph
      - shared-data:/shared-data

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      # IMPORTANTE: URL da API usando IP da VPN
      NEXT_PUBLIC_API_BASE_URL: http://192.168.10.35:8000
    depends_on:
      - api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  pgdata:
  shared-data:
