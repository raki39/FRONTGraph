#!/bin/bash

# Script de migra√ß√£o para AgentAPI via Docker Compose
# Executa migra√ß√£o das tabelas baseado nos modelos SQLAlchemy

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Verificar se Docker Compose est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    error "Docker n√£o encontrado. Instale Docker primeiro."
fi

# Verificar se o arquivo docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
    error "Arquivo docker-compose.yml n√£o encontrado. Execute este script na raiz do projeto."
fi

echo "=========================================="
echo "üóÑÔ∏è  MIGRA√á√ÉO DO BANCO DE DADOS - AGENTAPI"
echo "=========================================="
echo ""

# Verificar se os servi√ßos est√£o rodando
log "Verificando status dos servi√ßos..."

if ! docker compose ps postgres | grep -q "Up"; then
    warning "PostgreSQL n√£o est√° rodando. Iniciando servi√ßos..."
    docker compose up -d postgres redis
    log "Aguardando PostgreSQL inicializar..."
    sleep 10
else
    success "PostgreSQL est√° rodando"
fi

# Op√ß√µes de migra√ß√£o
VERIFY_ONLY=false
SEED_DATA=false

# Processar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --verify-only)
            VERIFY_ONLY=true
            shift
            ;;
        --seed)
            SEED_DATA=true
            shift
            ;;
        --help)
            echo "Uso: $0 [op√ß√µes]"
            echo ""
            echo "Op√ß√µes:"
            echo "  --verify-only    Apenas verifica se o schema est√° sincronizado"
            echo "  --seed          Cria dados iniciais ap√≥s migra√ß√£o"
            echo "  --help          Mostra esta ajuda"
            echo ""
            exit 0
            ;;
        *)
            error "Op√ß√£o desconhecida: $1. Use --help para ver as op√ß√µes dispon√≠veis."
            ;;
    esac
done

# Construir argumentos para o comando de migra√ß√£o
MIGRATE_ARGS=""
if [ "$VERIFY_ONLY" = true ]; then
    MIGRATE_ARGS="$MIGRATE_ARGS --verify-only"
fi
if [ "$SEED_DATA" = true ]; then
    MIGRATE_ARGS="$MIGRATE_ARGS --seed"
fi

# Executar migra√ß√£o
log "Executando migra√ß√£o..."

if [ "$VERIFY_ONLY" = true ]; then
    log "Modo verifica√ß√£o: apenas checando sincroniza√ß√£o do schema"
else
    log "Aplicando migra√ß√µes necess√°rias..."
fi

# Executar comando de migra√ß√£o no container da API
if docker compose exec api python -m api.db.migrate $MIGRATE_ARGS; then
    if [ "$VERIFY_ONLY" = true ]; then
        success "Verifica√ß√£o conclu√≠da"
    else
        success "Migra√ß√£o conclu√≠da com sucesso!"
    fi
else
    error "Falha na migra√ß√£o"
fi

echo ""
echo "=========================================="
echo "üìã COMANDOS √öTEIS:"
echo "=========================================="
echo ""
echo "# Verificar apenas (sem aplicar mudan√ßas):"
echo "  ./migrate.sh --verify-only"
echo ""
echo "# Migra√ß√£o completa com dados iniciais:"
echo "  ./migrate.sh --seed"
echo ""
echo "# Conectar ao PostgreSQL:"
echo "  docker compose exec postgres psql -U agent -d agentgraph"
echo ""
echo "# Ver logs da API:"
echo "  docker compose logs -f api"
echo ""
echo "# Reiniciar servi√ßos:"
echo "  docker compose restart"
echo ""
echo "=========================================="
