#!/bin/bash

echo "üöÄ Setup Completo do AgentAPI para Demonstra√ß√£o"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar pr√©-requisitos
echo -e "${BLUE}üìã Verificando pr√©-requisitos...${NC}"

if ! command_exists docker; then
    echo -e "${RED}‚ùå Docker n√£o encontrado. Instale Docker primeiro.${NC}"
    exit 1
fi

if ! command_exists docker-compose; then
    echo -e "${RED}‚ùå Docker Compose n√£o encontrado. Instale Docker Compose primeiro.${NC}"
    exit 1
fi

if ! command_exists node; then
    echo -e "${RED}‚ùå Node.js n√£o encontrado. Instale Node.js 18+ primeiro.${NC}"
    exit 1
fi

NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo -e "${RED}‚ùå Node.js 18+ √© necess√°rio. Vers√£o atual: $(node -v)${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Todos os pr√©-requisitos atendidos${NC}"

# Configurar vari√°veis de ambiente se necess√°rio
echo -e "${BLUE}‚öôÔ∏è Configurando vari√°veis de ambiente...${NC}"

if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        cp .env.example .env
        echo -e "${YELLOW}üìù Arquivo .env criado a partir do .env.example${NC}"
        echo -e "${YELLOW}   Edite o arquivo .env com suas configura√ß√µes antes de continuar${NC}"
    else
        echo -e "${RED}‚ùå Arquivo .env.example n√£o encontrado${NC}"
        exit 1
    fi
fi

# Configurar frontend
echo -e "${BLUE}üåê Configurando frontend...${NC}"

cd frontend

if [ ! -f ".env.local" ]; then
    cp .env.example .env.local
    echo -e "${GREEN}‚úÖ Arquivo .env.local criado${NC}"
fi

if [ ! -d "node_modules" ]; then
    echo -e "${BLUE}üì¶ Instalando depend√™ncias do frontend...${NC}"
    npm install
    echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"
fi

cd ..

# Iniciar servi√ßos
echo -e "${BLUE}üê≥ Iniciando servi√ßos com Docker...${NC}"

# Verificar se j√° est√° rodando
if docker-compose -f docker-compose.api.yml ps | grep -q "Up"; then
    echo -e "${YELLOW}‚ö†Ô∏è Alguns servi√ßos j√° est√£o rodando. Reiniciando...${NC}"
    docker-compose -f docker-compose.api.yml down
fi

# Iniciar servi√ßos
docker-compose -f docker-compose.api.yml up -d

# Aguardar servi√ßos ficarem prontos
echo -e "${BLUE}‚è≥ Aguardando servi√ßos ficarem prontos...${NC}"
sleep 10

# Verificar se API est√° respondendo
echo -e "${BLUE}üîç Verificando API...${NC}"
for i in {1..30}; do
    if curl -s http://localhost:8000/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API est√° respondendo${NC}"
        break
    fi
    if [ $i -eq 30 ]; then
        echo -e "${RED}‚ùå API n√£o est√° respondendo ap√≥s 30 tentativas${NC}"
        echo -e "${YELLOW}   Verifique os logs: docker-compose -f docker-compose.api.yml logs${NC}"
        exit 1
    fi
    echo -e "${YELLOW}   Tentativa $i/30...${NC}"
    sleep 2
done

# Iniciar frontend em background
echo -e "${BLUE}üåê Iniciando frontend...${NC}"
cd frontend
npm run dev &
FRONTEND_PID=$!
cd ..

# Aguardar frontend ficar pronto
echo -e "${BLUE}‚è≥ Aguardando frontend ficar pronto...${NC}"
sleep 5

# Verificar se frontend est√° respondendo
for i in {1..15}; do
    if curl -s http://localhost:3000 >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Frontend est√° respondendo${NC}"
        break
    fi
    if [ $i -eq 15 ]; then
        echo -e "${RED}‚ùå Frontend n√£o est√° respondendo${NC}"
        kill $FRONTEND_PID 2>/dev/null
        exit 1
    fi
    echo -e "${YELLOW}   Tentativa $i/15...${NC}"
    sleep 2
done

# Sucesso!
echo ""
echo -e "${GREEN}üéâ Setup completo! Sistema pronto para demonstra√ß√£o${NC}"
echo ""
echo -e "${BLUE}üìç URLs de Acesso:${NC}"
echo -e "   üåê Frontend: ${GREEN}http://localhost:3000${NC}"
echo -e "   üîß API: ${GREEN}http://localhost:8000${NC}"
echo -e "   üìö Documenta√ß√£o: ${GREEN}http://localhost:8000/docs${NC}"
echo ""
echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
echo -e "   1. Acesse ${GREEN}http://localhost:3000${NC}"
echo -e "   2. Crie uma conta de usu√°rio"
echo -e "   3. Configure uma conex√£o PostgreSQL"
echo -e "   4. Crie um agente"
echo -e "   5. Teste o chat!"
echo ""
echo -e "${BLUE}üìñ Guia completo: ${GREEN}DEMO_INSTRUCTIONS.md${NC}"
echo ""
echo -e "${YELLOW}üí° Para parar os servi√ßos:${NC}"
echo -e "   docker-compose -f docker-compose.api.yml down"
echo -e "   kill $FRONTEND_PID"
echo ""

# Salvar PID do frontend para facilitar o stop
echo $FRONTEND_PID > .frontend.pid

echo -e "${GREEN}‚ú® Demonstra√ß√£o pronta!${NC}"
