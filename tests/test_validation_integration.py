"""
Teste de integra√ß√£o do n√≥ de valida√ß√£o no grafo principal
"""
import asyncio
import json
import sys
import os

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agentgraph.graphs.main_graph import AgentGraphManager


async def test_validation_integration():
    """Testa a integra√ß√£o do n√≥ de valida√ß√£o no grafo principal"""
    print("üß™ TESTANDO INTEGRA√á√ÉO DA VALIDA√á√ÉO NO GRAFO PRINCIPAL")
    print("=" * 60)
    
    try:
        # Inicializa o grafo
        print("üìù Inicializando grafo...")
        manager = AgentGraphManager()
        print("‚úÖ Grafo inicializado")
        
        # Vamos usar CSV que j√° est√° funcionando para demonstrar a valida√ß√£o
        print("\nüîç TESTE 1: Query sem valida√ß√£o (padr√£o)")
        print("-" * 50)

        # Primeiro, vamos criar dados de teste simulados para for√ßar uma resposta
        # Isso vai simular uma query bem-sucedida para testar a valida√ß√£o
        result = await manager.process_query(
            user_input="Quantos registros temos na tabela?",
            selected_model="GPT-4o-mini",
            connection_type="csv",
            validation_enabled=False  # Valida√ß√£o desabilitada
        )
        
        print(f"‚úÖ Resultado sem valida√ß√£o:")
        print(f"   Sucesso: {not result.get('error')}")
        print(f"   Valida√ß√£o executada: {result.get('validation_success', 'N/A')}")
        print(f"   Tempo de valida√ß√£o: {result.get('validation_time', 0):.2f}s")
        
        # Teste 2: Query com valida√ß√£o individual habilitada
        print("\nüîç TESTE 2: Query com valida√ß√£o individual")
        print("-" * 50)

        result = await manager.process_query(
            user_input="Mostre os melhores produtos do √∫ltimo per√≠odo",
            selected_model="GPT-4o-mini",
            connection_type="csv",
            validation_enabled=True,
            validation_type="individual",
            validation_model="gpt-4o-mini",
            validation_auto_improve=True
        )
        
        print(f"‚úÖ Resultado com valida√ß√£o individual:")
        print(f"   Sucesso: {not result.get('error')}")
        print(f"   Valida√ß√£o executada: {result.get('validation_success', False)}")
        print(f"   Tempo de valida√ß√£o: {result.get('validation_time', 0):.2f}s")
        
        if result.get('validation_result'):
            validation_result = result['validation_result']
            print(f"   Score geral: {validation_result.get('overall_score', 'N/A')}")
            print(f"   Issues encontrados: {len(validation_result.get('issues_found', []))}")
            print(f"   Sugest√µes: {len(validation_result.get('suggestions', []))}")
        
        # Teste 3: Query com valida√ß√£o comparativa habilitada
        print("\nüîç TESTE 3: Query com valida√ß√£o comparativa")
        print("-" * 50)

        result = await manager.process_query(
            user_input="Qual o faturamento por categoria no √∫ltimo ano?",
            selected_model="GPT-4o-mini",
            connection_type="csv",
            validation_enabled=True,
            validation_type="comparative",
            validation_model="gpt-4o-mini",
            validation_comparison_limit=3,
            validation_use_similarity=True
        )
        
        print(f"‚úÖ Resultado com valida√ß√£o comparativa:")
        print(f"   Sucesso: {not result.get('error')}")
        print(f"   Valida√ß√£o executada: {result.get('validation_success', False)}")
        print(f"   Tempo de valida√ß√£o: {result.get('validation_time', 0):.2f}s")
        
        if result.get('validation_result'):
            validation_result = result['validation_result']
            print(f"   Score consist√™ncia: {validation_result.get('consistency_score', 'N/A')}")
            print(f"   Inconsist√™ncias: {len(validation_result.get('inconsistencies_found', []))}")
            print(f"   IDs comparados: {validation_result.get('compared_run_ids', [])}")
        
        print("\nüéâ TODOS OS TESTES DE INTEGRA√á√ÉO PASSARAM!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de integra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    asyncio.run(test_validation_integration())
